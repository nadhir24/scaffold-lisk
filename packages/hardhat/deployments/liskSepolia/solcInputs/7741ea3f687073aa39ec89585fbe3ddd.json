{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/SimpleDEX.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @title SimpleDEX\r\n * @notice A simplified decentralized exchange using constant product AMM (x * y = k)\r\n * @dev Supports a single token pair with add/remove liquidity and swap functions\r\n */\r\ncontract SimpleDEX is ReentrancyGuard {\r\n    // Token addresses\r\n    IERC20 public immutable tokenA;\r\n    IERC20 public immutable tokenB;\r\n\r\n    // Pool reserves\r\n    uint256 public reserveA;\r\n    uint256 public reserveB;\r\n\r\n    // Liquidity tracking\r\n    uint256 public totalLiquidity;\r\n    mapping(address => uint256) public liquidity;\r\n\r\n    // Fee (0.3% = 3/1000)\r\n    uint256 public constant FEE_NUMERATOR = 3;\r\n    uint256 public constant FEE_DENOMINATOR = 1000;\r\n\r\n    // Events\r\n    event LiquidityAdded(\r\n        address indexed provider,\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidityMinted\r\n    );\r\n    event LiquidityRemoved(\r\n        address indexed provider,\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidityBurned\r\n    );\r\n    event Swap(\r\n        address indexed user,\r\n        address indexed tokenIn,\r\n        uint256 amountIn,\r\n        uint256 amountOut\r\n    );\r\n\r\n    /**\r\n     * @notice Constructor sets the token pair\r\n     * @param _tokenA Address of first token\r\n     * @param _tokenB Address of second token\r\n     */\r\n    constructor(address _tokenA, address _tokenB) {\r\n        require(_tokenA != address(0) && _tokenB != address(0), \"Invalid token address\");\r\n        require(_tokenA != _tokenB, \"Tokens must be different\");\r\n\r\n        tokenA = IERC20(_tokenA);\r\n        tokenB = IERC20(_tokenB);\r\n    }\r\n\r\n    /**\r\n     * @notice Add liquidity to the pool\r\n     * @param amountA Amount of token A to add\r\n     * @param amountB Amount of token B to add\r\n     * @return liquidityMinted Amount of liquidity shares minted\r\n     */\r\n    function addLiquidity(uint256 amountA, uint256 amountB)\r\n        external\r\n        nonReentrant\r\n        returns (uint256 liquidityMinted)\r\n    {\r\n        require(amountA > 0 && amountB > 0, \"Amounts must be greater than 0\");\r\n\r\n        // Transfer tokens from user to contract\r\n        tokenA.transferFrom(msg.sender, address(this), amountA);\r\n        tokenB.transferFrom(msg.sender, address(this), amountB);\r\n\r\n        // Calculate liquidity to mint\r\n        if (totalLiquidity == 0) {\r\n            // First liquidity provider: liquidity = sqrt(amountA * amountB)\r\n            // We use a simple formula: liquidity = amountA (for simplicity)\r\n            liquidityMinted = amountA;\r\n        } else {\r\n            // Subsequent liquidity: maintain pool ratio\r\n            // liquidityMinted = (amountA / reserveA) * totalLiquidity\r\n            // We take the minimum to prevent manipulation\r\n            uint256 liquidityA = (amountA * totalLiquidity) / reserveA;\r\n            uint256 liquidityB = (amountB * totalLiquidity) / reserveB;\r\n            liquidityMinted = liquidityA < liquidityB ? liquidityA : liquidityB;\r\n        }\r\n\r\n        require(liquidityMinted > 0, \"Insufficient liquidity minted\");\r\n\r\n        // Update state\r\n        liquidity[msg.sender] += liquidityMinted;\r\n        totalLiquidity += liquidityMinted;\r\n        reserveA += amountA;\r\n        reserveB += amountB;\r\n\r\n        emit LiquidityAdded(msg.sender, amountA, amountB, liquidityMinted);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove liquidity from the pool\r\n     * @param liquidityAmount Amount of liquidity shares to burn\r\n     * @return amountA Amount of token A returned\r\n     * @return amountB Amount of token B returned\r\n     */\r\n    function removeLiquidity(uint256 liquidityAmount)\r\n        external\r\n        nonReentrant\r\n        returns (uint256 amountA, uint256 amountB)\r\n    {\r\n        require(liquidityAmount > 0, \"Amount must be greater than 0\");\r\n        require(liquidity[msg.sender] >= liquidityAmount, \"Insufficient liquidity\");\r\n\r\n        // Calculate amounts to return (proportional to share)\r\n        amountA = (liquidityAmount * reserveA) / totalLiquidity;\r\n        amountB = (liquidityAmount * reserveB) / totalLiquidity;\r\n\r\n        require(amountA > 0 && amountB > 0, \"Insufficient liquidity burned\");\r\n\r\n        // Update state\r\n        liquidity[msg.sender] -= liquidityAmount;\r\n        totalLiquidity -= liquidityAmount;\r\n        reserveA -= amountA;\r\n        reserveB -= amountB;\r\n\r\n        // Transfer tokens back to user\r\n        tokenA.transfer(msg.sender, amountA);\r\n        tokenB.transfer(msg.sender, amountB);\r\n\r\n        emit LiquidityRemoved(msg.sender, amountA, amountB, liquidityAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Swap one token for another\r\n     * @param tokenIn Address of token to swap in\r\n     * @param amountIn Amount of token to swap in\r\n     * @return amountOut Amount of token received\r\n     */\r\n    function swap(address tokenIn, uint256 amountIn)\r\n        external\r\n        nonReentrant\r\n        returns (uint256 amountOut)\r\n    {\r\n        require(amountIn > 0, \"Amount must be greater than 0\");\r\n        require(\r\n            tokenIn == address(tokenA) || tokenIn == address(tokenB),\r\n            \"Invalid token\"\r\n        );\r\n\r\n        // Determine input/output tokens and reserves\r\n        bool isTokenA = tokenIn == address(tokenA);\r\n        (IERC20 tokenInContract, IERC20 tokenOutContract) = isTokenA\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        (uint256 reserveIn, uint256 reserveOut) = isTokenA\r\n            ? (reserveA, reserveB)\r\n            : (reserveB, reserveA);\r\n\r\n        // Transfer input token from user\r\n        tokenInContract.transferFrom(msg.sender, address(this), amountIn);\r\n\r\n        // Calculate output amount with fee\r\n        // Formula: amountOut = (amountIn * reserveOut) / (reserveIn + amountIn)\r\n        // With 0.3% fee: amountIn = amountIn * (1 - 0.003) = amountIn * 997/1000\r\n        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);\r\n        uint256 numerator = amountInWithFee * reserveOut;\r\n        uint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;\r\n        amountOut = numerator / denominator;\r\n\r\n        require(amountOut > 0, \"Insufficient output amount\");\r\n        require(amountOut < reserveOut, \"Insufficient liquidity\");\r\n\r\n        // Update reserves\r\n        if (isTokenA) {\r\n            reserveA += amountIn;\r\n            reserveB -= amountOut;\r\n        } else {\r\n            reserveB += amountIn;\r\n            reserveA -= amountOut;\r\n        }\r\n\r\n        // Transfer output token to user\r\n        tokenOutContract.transfer(msg.sender, amountOut);\r\n\r\n        emit Swap(msg.sender, tokenIn, amountIn, amountOut);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate swap output amount (view function)\r\n     * @param tokenIn Address of token to swap in\r\n     * @param amountIn Amount of token to swap in\r\n     * @return amountOut Estimated amount of token to receive\r\n     */\r\n    function getSwapAmount(address tokenIn, uint256 amountIn)\r\n        external\r\n        view\r\n        returns (uint256 amountOut)\r\n    {\r\n        require(amountIn > 0, \"Amount must be greater than 0\");\r\n        require(\r\n            tokenIn == address(tokenA) || tokenIn == address(tokenB),\r\n            \"Invalid token\"\r\n        );\r\n\r\n        // Determine reserves\r\n        bool isTokenA = tokenIn == address(tokenA);\r\n        (uint256 reserveIn, uint256 reserveOut) = isTokenA\r\n            ? (reserveA, reserveB)\r\n            : (reserveB, reserveA);\r\n\r\n        // Calculate output with fee\r\n        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);\r\n        uint256 numerator = amountInWithFee * reserveOut;\r\n        uint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    /**\r\n     * @notice Get current pool state\r\n     * @return _reserveA Reserve of token A\r\n     * @return _reserveB Reserve of token B\r\n     * @return _totalLiquidity Total liquidity shares\r\n     */\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint256 _reserveA, uint256 _reserveB, uint256 _totalLiquidity)\r\n    {\r\n        return (reserveA, reserveB, totalLiquidity);\r\n    }\r\n\r\n    /**\r\n     * @notice Get user's liquidity position\r\n     * @param user Address to check\r\n     * @return liquidityAmount User's liquidity shares\r\n     * @return sharePercentage User's percentage of pool (in basis points, e.g., 1000 = 10%)\r\n     */\r\n    function getUserLiquidity(address user)\r\n        external\r\n        view\r\n        returns (uint256 liquidityAmount, uint256 sharePercentage)\r\n    {\r\n        liquidityAmount = liquidity[user];\r\n        sharePercentage = totalLiquidity > 0\r\n            ? (liquidityAmount * 10000) / totalLiquidity\r\n            : 0;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}